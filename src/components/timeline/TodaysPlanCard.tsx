
'use client';

import { useEffect, useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Calendar, AlertTriangle } from 'lucide-react';
import { generateDailyPlan } from '@/ai/flows/generate-daily-plan-flow';
import type { DailyPlan, TimelineEvent, CareerGoal, Skill, UserPreferences } from '@/types';
import { useApiKey } from '@/hooks/use-api-key';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/context/AuthContext';
import { getTimelineEvents } from '@/services/timelineService';
import { getCareerGoals } from '@/services/careerGoalsService';
import { getSkills } from '@/services/skillsService';
import { getUserPreferences } from '@/services/userService';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { TodaysPlanContent } from './TodaysPlanContent';

export default function TodaysPlanCard() {
  const { user } = useAuth();
  const { apiKey } = useApiKey();
  const { toast } = useToast();
  
  const [plan, setPlan] = useState<DailyPlan | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchAndGeneratePlan = useCallback(async () => {
    if (!user) {
      setIsLoading(false);
      setError("Please sign in to generate a plan.");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const [timelineEvents, careerGoals, skills, userPreferences] = await Promise.all([
        getTimelineEvents(user.uid),
        getCareerGoals(user.uid),
        getSkills(user.uid),
        getUserPreferences(user.uid),
      ]);

      if (!userPreferences) {
        throw new Error("Please set your daily preferences in Settings to generate a plan.");
      }

      // Serialize data for the AI flow
      const serializedEvents = timelineEvents.map(e => ({ ...e, date: e.date.toISOString(), endDate: e.endDate?.toISOString() }));
      const serializedGoals = careerGoals.map(g => ({ ...g, deadline: g.deadline?.toISOString() }));
      const serializedSkills = skills.map(s => ({ ...s, lastUpdated: s.lastUpdated.toISOString() }));

      const result = await generateDailyPlan({
        apiKey,
        currentDate: new Date().toISOString(),
        timelineEvents: serializedEvents,
        careerGoals: serializedGoals,
        skills: serializedSkills,
        userPreferences,
      });

      setPlan(result);
    } catch (err: any) {
      console.error('Error generating daily plan:', err);
      const errorMessage = err.message || "Failed to generate daily plan. Please try again later.";
      setError(errorMessage);
      toast({ title: "Planning Error", description: errorMessage, variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  }, [user, apiKey, toast]);

  useEffect(() => {
    fetchAndGeneratePlan();
  }, [fetchAndGeneratePlan]);

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center h-48 text-center">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-muted-foreground">The AI is crafting your personalized plan...</p>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex flex-col items-center justify-center h-48 text-center text-destructive">
          <AlertTriangle className="h-10 w-10 mb-2" />
          <p className="font-semibold">Could not generate plan</p>
          <p className="text-sm">{error}</p>
        </div>
      );
    }

    if (plan) {
      return <TodaysPlanContent plan={plan} />;
    }

    return (
      <div className="flex flex-col items-center justify-center h-48 text-center text-muted-foreground">
        <p>No plan available for today.</p>
      </div>
    );
  };

  return (
    <Card className="frosted-glass shadow-lg">
      <CardHeader>
        <CardTitle className="font-headline text-xl text-primary flex items-center">
          <Calendar className="mr-2 h-5 w-5 text-accent" /> AI-Powered Daily Plan
        </CardTitle>
        <CardDescription>
          Your personalized schedule and goals for today, generated by AI.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {renderContent()}
      </CardContent>
    </Card>
  );
}
